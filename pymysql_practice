"""使用pymysql链接数据库，并实现简单操作：

1. 使用pymysql链接一个名为test的数据库对象
2. 使用test数据库，进行一些简单操作
   - 简单的创建一个` user` 表，user表中有两个字段：id, name与age。
3. 使用游标对象，操作数据库中的数据
   - 插入一条数据, `name` 为 `Tom`, `age` 为 `18`
   - 再次插入上面一条数据, 报错时执行回滚操作
   - 插入多条数据, ("rianley", 18), ("Egon", 20), ("wanghui", 21)
   - 删除id为4的数据
   - 将 `Tom` 的年龄改为20
4. 关闭游标对象,关闭链接对象"""

import pymysql
# 1. 使用pymysql链接一个名为test的数据库对象
connection = pymysql.connect(host='127.0.0.1',
                             port=3306,
                             user='root',
                             password='123456',
                             db='test',
                             charset='utf8')
print(connection)
cursor = connection.cursor()

# 2. 使用test数据库，进行一些简单操作
#    - 简单的创建一个` user` 表，user表中有两个字段：id, name与age。
sql = """create table user(
    id int unsigned primary key auto_increment not null,
    name varchar(20) not null,
    age int not null
);"""
cursor.execute(sql)

# 3. 使用游标对象，操作数据库中的数据
   # - 插入一条数据, `name` 为 `Tom`, `age` 为 `18`
one_data = "insert into user values(001, 'Tom', '18');"
cursor.execute(one_data)
connection.commit()

# - 再次插入上面一条数据, 报错时执行回滚操作
try:
    cursor.execute(one_data)
    connection.commit()
except Exception as e:
    connection.rollback()

# - 插入多条数据, ("rianley", 18), ("Egon", 20), ("wanghui", 21)
sql = "insert into user(name, age) value(%s, %s);"
many_data = [('rianley', 18), ('Egon', 20), ('wanghui', 21)]
cursor.executemany(sql, many_data)
connection.commit()

# - 删除id为4的数据
cursor.execute('delete from user where id=4;')
connection.commit()

# - 将 `Tom` 的年龄改为20
cursor.execute("update user set age=20 where name='Tom';" )
connection.commit()

# 查询数据
cursor.execute("select * from user")
# 读取一条数据（就像从抽屉中不放回的取出一个东西）
rest_1 = cursor.fetchone()
print(rest_1)
# 读取所有数据
rest = cursor.fetchall()
print(rest)

# 4. 关闭游标对象,关闭链接对象
cursor.close()
connection.close()
